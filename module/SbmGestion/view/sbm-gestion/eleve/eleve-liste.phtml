<?php
/**
 * Liste des élèves
 *
 *
 * @project sbm
 * @package SbmGestion/view/sbm-gestion/eleve
 * @filesource eleve-liste.phtml
 * @encodage UTF-8
 * @author DAFAP Informatique - Alain Pomirol (dafap@free.fr)
 * @date 15 juil. 2021
 * @version 2021-2.5.13
 */
use SbmBase\Model\DateLib;

$this->headLink()->appendStylesheet($this->basePath('/css/fam-icons-custom.css'));
// gestion des checkbox selection
$this->jQuery();
$js_chkCallback = '';
$js_chkTrigger = '';
// selection
$modele_chkTrigger = "$('#chk%d').trigger('change');\n";
$modele_chkCallback = <<<EOT
$("#chk%d").change(function() {
    var action = ($(this).is(':checked'))?'check':'uncheck';
    $.ajax({
				url : '/sbmajaxeleve/'+action+'selectioneleve/eleveId:%d',
				success : function(data) {},
				error : function(xhr, ajaxOptions, thrownError) {
					alert(xhr.status + " " + thrownError);
				}
			});
  });\n
EOT;

// gestion du hidden op des formulaires de liste : les arguments sont id, suffixe de l'id,
// valeur
// (ne pas mettre de guillemet dans la chaine)
$js_op = 'window.document.getElementById(\'op%s%s\').value=\'%s\';';

// le paginateur
$this->paginator->setDefaultItemCountPerPage($this->count_per_page);
$this->paginator->setCurrentPageNumber($this->page);
try {
    $eleves = $this->paginator->getCurrentItems();
} catch (\Zend\Db\Adapter\Exception\InvalidQueryException $e) {
    // affichage d'une page d'erreur
    ?>
<h1>Liste des élèves</h1>
<div id="liste-wrapper">
	<div id="liste-inner">
		<pre>
	  <?= $e->getMessage();?>
	</pre>
	</div>
	<div id="liste-footer">
		<div class="criteres-wrapper">
		<?php if (! is_null($this->criteres_form)) :?>
        	<?= $this->form()->openTag($this->criteres_form);?>
            <?= $this->formCollection($this->criteres_form, true);?>
            <?= $this->form()->closeTag();?>
        <?php endif;?>
        </div>
	</div>
</div>
<?php
    return;
} // fin du catch (affichage d'une page d'erreur)
  // affichage d'un message description au bas du tableau si on utilise la couleur rouge
$afficheRouge = false;

// les url à utiliser
$url_deselection = $this->url('sbmgestion/eleve',
    [
        'action' => 'eleve-selection',
        'page' => $this->page
    ]);
$url_ici = $this->url('sbmgestion/eleve',
    [
        'action' => 'eleve-liste',
        'page' => $this->page
    ]);
$url_responsable = $this->url('sbmgestion/eleve',
    [
        'action' => 'responsable-edit',
        'page' => $this->page
    ]);
$url_mail = $this->url('sbmgestion/eleve', [
    'action' => 'responsable-mail'
]);
$url_edit = $this->url('sbmgestion/eleve',
    [
        'action' => 'eleve-edit',
        'page' => $this->page
    ]);
$url_delete = $this->url('sbmgestion/eleve',
    [
        'action' => 'eleve-suppr',
        'page' => $this->page
    ]);
$url_group = $this->url('sbmgestion/eleve',
    [
        'action' => 'eleve-group',
        'page' => $this->page
    ]);
$url_ajouter = $this->url('sbmgestion/eleve',
    [
        'action' => 'eleve-ajout',
        'page' => $this->page
    ]);
$url_rapports = $this->url('sbmgestion/eleve',
    [
        'action' => empty($this->groupe) ? 'eleve-pdf' : 'eleve-groupe-pdf',
        'page' => $this->page
    ]);
$url_map = $this->url('sbmgestion/eleve',
    [
        'action' => 'responsable-localisation',
        'page' => $this->page
    ]);
$url_photos = $this->url('sbmgestion/gestioneleve',
    [
        'action' => 'photos',
        'page' => $this->page
    ]);
$url_cartes = $this->url('sbmgestion/gestioneleve',
    [
        'action' => 'cartes',
        'page' => $this->page
    ]);
$url_download = $this->url('sbmgestion/eleve', [
    'action' => 'eleve-download'
]);
$url_duplicata = $this->url('sbmgestion/gestioneleve',
    [
        'action' => 'duplicata-carte',
        'page' => $this->page
    ]);
$url_add_photo = $this->url('sbmgestion/eleve',
    [
        'action' => 'envoiphoto',
        'page' => $this->page
    ]);
$url_gestioneleve = $this->url('sbmgestion/gestioneleve');
$url_majnotification = $this->url('sbmpaiement', [
    'action' => 'majnotification'
]);
$url_eleve_responsables = $this->url('sbmgestion/eleve',
    [
        'action' => 'eleve-responsables',
        'page' => $this->page
    ]);

// définition de la barre de menu du haut de page pour l'aide de vue listeZoneActions()
if (! empty($this->groupe)) {
    $hiddens = [
        'op' => $this->groupe
    ]; // pour passer les éléments à prendre en compte pour eleve-groupe
} else {
    $hiddens = [];
}
$menuImpression = $this->menuRapports(
    $this->url('sbmgestion/eleve', [
        'action' => 'eleve-liste'
    ]), $url_rapports, 'fam-printer', null, $hiddens);
$hiddens = $menuImpression['hiddens']; // mise à jour si nécessaire par l'ajout de
                                       // 'documentId'

$actions = [
    'cancel' => [
        'class' => 'fam-door-out',
        'formaction' => $url_ici,
        'title' => 'Retour'
    ],
    'rapports' => $menuImpression['content'],
    'cartes' => [
        'class' => 'fam-vcard',
        'formaction' => $url_cartes,
        'title' => 'Edition des cartes'
    ],
    'photos' => [
        'class' => 'fam-photos',
        'formaction' => $url_photos,
        'title' => 'Extraction d\un fichier de photos'
    ],
    'download' => [
        'class' => 'fam-cloud-download',
        'formaction' => $url_download,
        'formtarget' => '_blank',
        'title' => 'Extraction de la liste dans un fichier'
    ],
    'gestion' => [
        'class' => 'fam-application-side-expand',
        'formaction' => $url_gestioneleve,
        'title' => 'Gestion des inscriptions'
    ],
    'responsables' => [
        'class' => 'fam-user-female',
        'formaction' => $url_eleve_responsables,
        'title' => 'Sélectionner les responsables de ces élèves'
    ],
    'selection' => [
        'class' => 'fam-basket-delete',
        'formaction' => $url_deselection,
        'title' => 'Démarquer toutes les sélections'
    ],
    'ajouter' => [
        'class' => 'fam-add',
        'formaction' => $url_ajouter,
        'title' => 'Nouvel élève'
    ]
];
?>
<h1>Liste des élèves</h1>
<div id="liste-wrapper">
	<div id="liste-header" class="clearfix">
		<div class="menu float-left"><?= $this->listeZoneActions($hiddens, $actions);?></div>
		<div class="flashMessenger float-right">
<?= $this->flashMessenger()->render('success');?>
<?= $this->flashMessenger()->render('warning');?>
<?= $this->flashMessenger()->render('error');?>
<?= $this->flashMessenger()->render('info');?>
<?= $this->flashMessenger()->render('default');?>
</div>
	</div>
	<div id="liste-inner">
		<table class="eleves">
			<tbody>
				<tr>
					<th></th>
					<th>Numéro</th>
					<th>Nom</th>
					<th>Prénom</th>
					<th>Né(e) le</th>
					<th>Responsables</th>
					<th>Commune</th>
					<th>Etablissement scolaire</th>
					<th>Classe</th>
					<th>Services</th>
					<th>Arrêts</th>
					<th>Sélect.</th>
					<th></th>
				</tr>
        		<?php foreach($eleves as $eleve): ?>
        		<?php
            // responsable 1
            $r = htmlspecialchars(
                str_replace(' ', '&nbsp;', $eleve['responsable1NomPrenom']), ENT_QUOTES,
                'utf-8', false);
            $hiddensR1 = [
                'responsableId' => $eleve['responsable1Id'],
                'info' => $r,
                'origine' => $url_ici
            ];
            $buttonsR1 = [
                'r1' => [
                    'class' => 'fam-magnifier',
                    'formaction' => $url_responsable,
                    'title' => 'Voir sa fiche',
                    'onclick' => sprintf($js_op, $eleve['eleveId'], 'r1', 'voir r1')
                ],
                'localiser' => [
                    'class' => 'fam-map-magnify',
                    'formaction' => $url_map,
                    'title' => 'Localiser cette adresse sur la carte',
                    'onclick' => sprintf($js_op, $eleve['eleveId'], 'r1', 'localiser r1')
                ]
            ];
            if (! empty($eleve['emailR1'])) {
                $hiddensR1 = array_merge($hiddensR1,
                    [
                        'email' => $eleve['emailR1'],
                        'responsable' => sprintf('%s %s', $eleve['titreR1'],
                            $eleve['responsable1NomPrenom']),
                        'group' => $url_ici
                    ]);
                $buttonsR1['ecrire'] = [
                    'class' => 'fam-email',
                    'formaction' => $url_mail,
                    'title' => 'Envoyer un email'
                ];
            }
            $itemR1 = $this->listeLigneActions($eleve['eleveId'] . 'r1', $hiddensR1,
                $buttonsR1, [
                    'style' => 'display: inline;'
                ]);
            $itemR1 .= sprintf('<span title="%s">%s</span>', $eleve['communeR1'], $r);
            // responsable 2
            if ($eleve['responsable2Id']) {
                $r = htmlspecialchars(
                    str_replace(' ', '&nbsp;', $eleve['responsable2NomPrenom']),
                    ENT_QUOTES, 'utf-8', false);
                $hiddensR2 = [
                    'responsableId' => $eleve['responsable2Id'],
                    'info' => $r,
                    'origine' => $url_ici
                ];
                $buttonsR2 = [
                    'r2' => [
                        'class' => 'fam-magnifier',
                        'formaction' => $url_responsable,
                        'title' => 'Voir sa fiche',
                        'onclick' => sprintf($js_op, $eleve['eleveId'], 'r2', 'voir r2')
                    ],
                    'localiser' => [
                        'class' => 'fam-map-magnify',
                        'formaction' => $url_map,
                        'title' => 'Localiser cette adresse sur la carte',
                        'onclick' => sprintf($js_op, $eleve['eleveId'], 'r2',
                            'localiser r2')
                    ]
                ];
                if (! empty($eleve['emailR2'])) {
                    $hiddensR2 = array_merge($hiddensR2,
                        [
                            'email' => $eleve['emailR2'],
                            'responsable' => sprintf('%s %s', $eleve['titreR2'],
                                $eleve['responsable2NomPrenom']),
                            'group' => $url_ici
                        ]);
                    $buttonsR2['ecrire'] = [
                        'class' => 'fam-email',
                        'formaction' => $url_mail,
                        'title' => 'Envoyer un email'
                    ];
                }
                $itemR2 = $this->listeLigneActions($eleve['eleveId'] . 'r2', $hiddensR2,
                    $buttonsR2, [
                        'style' => 'display: inline;'
                    ]);
                $itemR2 .= sprintf('<span title="%s">%s</span>', $eleve['communeR2'], $r);
                $ga = true;
                $rowspan = ' rowspan="2"';
            } else {
                $itemR2 = '';
                $ga = false;
                $rowspan = '';
            }
            // selection
            $js_chkTrigger .= sprintf($modele_chkTrigger, $eleve['eleveId']);
            $js_chkCallback .= sprintf($modele_chkCallback, $eleve['eleveId'],
                $eleve['eleveId']);
            // tr css
            $tr_css = $this->cycle([
                "even",
                "odd"
            ])->next();
            if (! $eleve['inscrit']) {
                $tr_css .= ' barre';
            }
            if ($eleve['demandeR1'] == 2 || $eleve['demandeR2'] == 2) {
                $rouge = $eleve['accordR1'] + $eleve['accordR2'] == 0;
            } else {
                $rouge = ($eleve['district'] == 0 && $eleve['derogation'] == 0) ||
                    ($eleve['demandeR1'] + $eleve['demandeR2'] == 0) ||
                    ($eleve['distanceR1'] < 1.0 && $eleve['distanceR2'] < 1.0);
            }
            if ($rouge) {
                $tr_css .= ' alert';
                $afficheRouge = true;
            }
            $inscrit = $eleve['paiement'];
            $inscrit |= $eleve['fa'];
            $inscrit |= $eleve['gratuit'] > 0;
            $inscrit |= ($eleve['demandeR1'] == 2 && $eleve['accordR1'] == 0 &&
                $eleve['subventionR1'] == 1);
            $inscrit |= ($eleve['demandeR2'] == 2 && $eleve['accordR2'] == 0 &&
                $eleve['subventionR2'] == 1);
            $this->pictogrammes('init')
                ->addPreinscrit(! $inscrit)
                ->addSansAffectation($eleve['affecte'])
                ->addSansPhoto($eleve['sansphoto'])
                ->addSansCarte($eleve['dateCarte'] < $this->dateDebut)
                ->addDistanceZero($eleve['demandeR1'], $eleve['distanceR1'],
                $eleve['demandeR2'], $eleve['distanceR2']);
            $hiddens = [
                'eleveId' => $eleve['eleveId'],
                'info' => $eleve['nom'] . ' ' . $eleve['prenom'],
                'origine' => $url_ici
            ];
            $buttons = [
                'modifier' => [
                    'class' => 'fam-pencil',
                    'formaction' => $url_edit,
                    'title' => 'modifier',
                    'onclick' => sprintf($js_op, $eleve['eleveId'], '', 'modifier')
                ],
                'supprimer' => [
                    'class' => 'fam-delete',
                    'formaction' => $url_delete,
                    'title' => 'supprimer',
                    'onclick' => sprintf($js_op, $eleve['eleveId'], '', 'supprimer')
                ],
                'majNotification' => [
                    'class' => 'fam-transmit-error',
                    'formaction' => $url_majnotification,
                    'title' => 'Vérifier les paiements en ligne',
                    'onclick' => sprintf($js_op, $eleve['eleveId'], '', 'majNotification')
                ],
                'addphoto' => [
                    'class' => 'fam-camera-add',
                    'formaction' => $url_add_photo,
                    'title' => 'Envoyer une photo'
                ],
                'duplicata' => [
                    'class' => 'fam-vcard-add',
                    'formaction' => $url_duplicata,
                    'title' => 'duplicata de la carte de transport',
                    'onclick' => sprintf($js_op, $eleve['eleveId'], '', 'duplicata')
                ],
                'famille' => [
                    'class' => 'fam-group',
                    'formaction' => $url_group,
                    'title' => 'élèves inscrits de la même famille',
                    'onclick' => sprintf($js_op, $eleve['eleveId'], '',
                        trim($eleve['responsable1Id'] . '|' . $eleve['responsable2Id']),
                        '|')
                ]
            ];
            if (! $eleve['sansphoto']) {
                unset($buttons['addphoto']);
            }
            if ($inscrit || $eleve['appelNotifieOk']) {
                unset($buttons['majNotification']);
            }
            ?>
                <tr class="petit <?= $tr_css;?>">
					<td <?= $rowspan;?>>
					<?= $this->pictogrammes();?>
                    </td>
					<td <?= $rowspan;?> class="numero">
						<?= $eleve['numero']; ?></td>
					<td <?= $rowspan;?> class="nom">
						<?= $this->escapeHtml($eleve['nom']); ?></td>
					<td <?= $rowspan;?> class="prenom">
						<?= $this->escapeHtml($eleve['prenom']); ?></td>
					<td <?= $rowspan;?> class="dateN">
						<?= DateLib::formatDateFromMysql($eleve['dateN']); ?></td>
					<td class="responsables"><?= $itemR1; ?></td>
					<td class="commune">
						<?= $this->escapeHtml($eleve['communeR1']);?></td>
					<td <?= $rowspan;?> class="etablissement">
						<?= $this->escapeHtml($eleve['etablissement']);?> -
						<?= $this->escapeHtml($eleve['communeEtablissement']);?></td>
					<td <?= $rowspan;?> class="classe">
						<?= $this->escapeHtml($eleve['classe']);?></td>
					<td class="service">
						<?= $this->printServices($eleve['eleveId'], 1);?></td>
					<td class="station">
						<?= $this->printStations($eleve['eleveId'], 1);?></td>
					<td <?= $rowspan;?> class="centre selection">
					<?=$this->renderCheckbox('selection', 'chk', $eleve['eleveId'], $eleve['selectionEleve']); ?>
					</td>
					<td <?= $rowspan;?> class="boutons">
						<?= $this->listeLigneActions($eleve['eleveId'], $hiddens, $buttons);?></td>
				</tr>
				<?php if ($ga):?>
				<tr class="petit <?= $tr_css;?>">
					<td class="responsables"><?= $itemR2; ?></td>
					<td class="commune"><?= $this->escapeHtml($eleve['communeR2']);?></td>
					<td class="service"><?= $this->printServices($eleve['eleveId'], 2);?></td>
					<td class="station"><?= $this->printStations($eleve['eleveId'], 2);?></td>
				</tr>
					<?php endif;?>
        <?php endforeach;?>
    </tbody>
		</table>
		<?php if ($afficheRouge) : ?>
		<p class="description">
			<span class="alert">Les lignes écrites en couleur rouge</span>
			correspondent à des élèves hors secteur et sans dérogation ou dont
			le(s) domicile(s) se situe(nt) à moins d'un kilomètre de
			l'établissement scolaire fréquenté.
		</p>
		<?php endif; ?>
	</div>
	<div id="liste-footer">
		<div class="pagination-wrapper clearfix">
			<?= $this->paginationControl($this->paginator, 'Sliding', 'sbm/pagination', []); ?></div>
		<div class="criteres-wrapper">
		<?php if (! is_null($this->criteres_form)) :?>
    		<?= $this->form()->openTag($this->criteres_form);?>
    		<?= $this->formCollection($this->criteres_form, true);?>
    		<?= $this->form()->closeTag();?>
    	<?php endif;?>
	    </div>
	</div>
</div>
<?php
$this->headScript()->captureStart();
?>
$(function() {
function triggerChange() {
<?= $js_chkTrigger;?>}
<?= $js_chkCallback;?>
});
<?php
$this->headScript()->captureEnd();
